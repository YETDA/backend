version: '3' # Docker Compose 버전 명시

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yetda-backend
    ports:
      - "${SPRING_EXTERNAL_PORT}:${SPRING_INTERNAL_PORT}"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    env_file:
      - .env
    networks:
      - yetda-network

  mysql:
    image: mysql:8.0
    container_name: yetda-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_EXTERNAL_PORT}:${MYSQL_INTERNAL_PORT}"
    volumes:
      - mysql-data:/var/lib/mysql # 데이터 지속성을 위한 볼륨 설정
    healthcheck: # 헬스체크 추가 (MySQL 상태 확인)
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" , "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - yetda-network
    env_file:
      - .env

  redis:
    image: redis:latest
    container_name: yetda-redis
    restart: always
    ports:
      - "${REDIS_EXTERNAL_PORT}:${REDIS_INTERNAL_PORT}"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - yetda-network

#  flask-recommender:
#    build:
#      context: ./recommendation-app
#    container_name: flask-recommender
#    ports:
#      - "5000:5000"
#    restart: unless-stopped
#    networks:
#      - yetda-network



volumes:
  mysql-data:
  redis-data:

networks:
  yetda-network:
    driver: bridge
